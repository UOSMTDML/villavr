declare filename "BandPassFilter.dsp"; declare name "BandPassFilter"; declare version "2.54.11";
declare compile_options "-single -scal -I libraries/ -I project/ -lang wasm";
declare library_path0 "/libraries/stdfaust.lib";
declare library_path1 "/libraries/filters.lib";
declare library_path2 "/project/basics.lib";
declare library_path3 "/libraries/maths.lib";
declare library_path4 "/libraries/platform.lib";
declare author "Grame";
declare basics_lib_name "Faust Basic Element Library";
declare basics_lib_version "0.9";
declare copyright "(c)GRAME 2006";
declare filename "FaustDSP";
declare filters_lib_lowpass0_highpass1 "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>";
declare filters_lib_name "Faust Filters Library";
declare filters_lib_version "0.3";
declare license "BSD";
declare maths_lib_author "GRAME";
declare maths_lib_copyright "GRAME";
declare maths_lib_license "LGPL with exception";
declare maths_lib_name "Faust Math Library";
declare maths_lib_version "2.5";
declare name "bandFilter";
declare platform_lib_name "Generic Platform Library";
declare platform_lib_version "0.3";
declare version "1.0";
ID_0 = \(x1).(\(x2).(x2,x1 : -)) ~ \(x3).((((2,((((3.1415927f,nentry("freq [unit:Hz][style:knob]", 1e+03f, 2e+01f, 2e+04f, 1.0f) : *),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan),((3.1415927f,nentry("freq [unit:Hz][style:knob]", 1e+03f, 2e+01f, 2e+04f, 1.0f) : *),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : *),1 : -) : *),((1,(((1e+01f,((0,vslider("gain [unit:dB]", 0.0f, -5e+01f, 5e+01f, 0.1f) : -),2e+01f : /) : pow),((3.1415927f,nentry("freq [unit:Hz][style:knob]", 1e+03f, 2e+01f, 2e+04f, 1.0f) : *),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : *),nentry("Q factor [style:knob]", 5e+01f, 0.1f, 1e+02f, 0.1f) : /) : +),(((3.1415927f,nentry("freq [unit:Hz][style:knob]", 1e+03f, 2e+01f, 2e+04f, 1.0f) : *),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan),((3.1415927f,nentry("freq [unit:Hz][style:knob]", 1e+03f, 2e+01f, 2e+04f, 1.0f) : *),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : *) : +) : /),x3 : *),((((1,(((1e+01f,((0,vslider("gain [unit:dB]", 0.0f, -5e+01f, 5e+01f, 0.1f) : -),2e+01f : /) : pow),((3.1415927f,nentry("freq [unit:Hz][style:knob]", 1e+03f, 2e+01f, 2e+04f, 1.0f) : *),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : *),nentry("Q factor [style:knob]", 5e+01f, 0.1f, 1e+02f, 0.1f) : /) : -),(((3.1415927f,nentry("freq [unit:Hz][style:knob]", 1e+03f, 2e+01f, 2e+04f, 1.0f) : *),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan),((3.1415927f,nentry("freq [unit:Hz][style:knob]", 1e+03f, 2e+01f, 2e+04f, 1.0f) : *),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : *) : +),((1,(((1e+01f,((0,vslider("gain [unit:dB]", 0.0f, -5e+01f, 5e+01f, 0.1f) : -),2e+01f : /) : pow),((3.1415927f,nentry("freq [unit:Hz][style:knob]", 1e+03f, 2e+01f, 2e+04f, 1.0f) : *),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : *),nentry("Q factor [style:knob]", 5e+01f, 0.1f, 1e+02f, 0.1f) : /) : +),(((3.1415927f,nentry("freq [unit:Hz][style:knob]", 1e+03f, 2e+01f, 2e+04f, 1.0f) : *),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan),((3.1415927f,nentry("freq [unit:Hz][style:knob]", 1e+03f, 2e+01f, 2e+04f, 1.0f) : *),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : *) : +) : /),(x3 : mem) : *) : +);
ID_1 = ID_0 : \(x4).((((((1,(((3.1415927f,nentry("freq [unit:Hz][style:knob]", 1e+03f, 2e+01f, 2e+04f, 1.0f) : *),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan),nentry("Q factor [style:knob]", 5e+01f, 0.1f, 1e+02f, 0.1f) : /) : +),(((3.1415927f,nentry("freq [unit:Hz][style:knob]", 1e+03f, 2e+01f, 2e+04f, 1.0f) : *),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan),((3.1415927f,nentry("freq [unit:Hz][style:knob]", 1e+03f, 2e+01f, 2e+04f, 1.0f) : *),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : *) : +),((1,(((1e+01f,((0,vslider("gain [unit:dB]", 0.0f, -5e+01f, 5e+01f, 0.1f) : -),2e+01f : /) : pow),((3.1415927f,nentry("freq [unit:Hz][style:knob]", 1e+03f, 2e+01f, 2e+04f, 1.0f) : *),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : *),nentry("Q factor [style:knob]", 5e+01f, 0.1f, 1e+02f, 0.1f) : /) : +),(((3.1415927f,nentry("freq [unit:Hz][style:knob]", 1e+03f, 2e+01f, 2e+04f, 1.0f) : *),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan),((3.1415927f,nentry("freq [unit:Hz][style:knob]", 1e+03f, 2e+01f, 2e+04f, 1.0f) : *),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : *) : +) : /),x4 : *),(((2,((((3.1415927f,nentry("freq [unit:Hz][style:knob]", 1e+03f, 2e+01f, 2e+04f, 1.0f) : *),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan),((3.1415927f,nentry("freq [unit:Hz][style:knob]", 1e+03f, 2e+01f, 2e+04f, 1.0f) : *),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : *),1 : -) : *),((1,(((1e+01f,((0,vslider("gain [unit:dB]", 0.0f, -5e+01f, 5e+01f, 0.1f) : -),2e+01f : /) : pow),((3.1415927f,nentry("freq [unit:Hz][style:knob]", 1e+03f, 2e+01f, 2e+04f, 1.0f) : *),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : *),nentry("Q factor [style:knob]", 5e+01f, 0.1f, 1e+02f, 0.1f) : /) : +),(((3.1415927f,nentry("freq [unit:Hz][style:knob]", 1e+03f, 2e+01f, 2e+04f, 1.0f) : *),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan),((3.1415927f,nentry("freq [unit:Hz][style:knob]", 1e+03f, 2e+01f, 2e+04f, 1.0f) : *),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : *) : +) : /),(x4 : mem) : *) : +),((((1,(((3.1415927f,nentry("freq [unit:Hz][style:knob]", 1e+03f, 2e+01f, 2e+04f, 1.0f) : *),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan),nentry("Q factor [style:knob]", 5e+01f, 0.1f, 1e+02f, 0.1f) : /) : -),(((3.1415927f,nentry("freq [unit:Hz][style:knob]", 1e+03f, 2e+01f, 2e+04f, 1.0f) : *),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan),((3.1415927f,nentry("freq [unit:Hz][style:knob]", 1e+03f, 2e+01f, 2e+04f, 1.0f) : *),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : *) : +),((1,(((1e+01f,((0,vslider("gain [unit:dB]", 0.0f, -5e+01f, 5e+01f, 0.1f) : -),2e+01f : /) : pow),((3.1415927f,nentry("freq [unit:Hz][style:knob]", 1e+03f, 2e+01f, 2e+04f, 1.0f) : *),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : *),nentry("Q factor [style:knob]", 5e+01f, 0.1f, 1e+02f, 0.1f) : /) : +),(((3.1415927f,nentry("freq [unit:Hz][style:knob]", 1e+03f, 2e+01f, 2e+04f, 1.0f) : *),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan),((3.1415927f,nentry("freq [unit:Hz][style:knob]", 1e+03f, 2e+01f, 2e+04f, 1.0f) : *),(1.92e+05f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : / : tan) : *) : +) : /),(x4 : mem : mem) : *) : +);
ID_2 = vgroup("Bandfilter", ID_1);
process = ID_2;
